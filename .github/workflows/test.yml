name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run Python unit tests
      run: |
        cd tests
        python -m pytest test_scraper.py -v --cov=../scripts --cov-report=xml --cov-report=term-missing --junit-xml=python-results.xml
      env:
        PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/scripts
    
    - name: Upload Python test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: python-test-results-${{ matrix.python-version }}
        path: tests/python-results.xml
    
    - name: Upload Python coverage
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: python-coverage-${{ matrix.python-version }}
        path: tests/coverage.xml

  javascript-tests:
    name: JavaScript Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: tests/package-lock.json
    
    - name: Install dependencies
      run: |
        cd tests
        npm ci
    
    - name: Run JavaScript unit tests
      run: |
        cd tests
        npm test -- --coverage --coverageDirectory=coverage/javascript --ci --watchAll=false
    
    - name: Upload JavaScript test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: javascript-test-results-${{ matrix.node-version }}
        path: tests/coverage/javascript/
    
    - name: Upload JavaScript coverage
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: javascript-coverage-${{ matrix.node-version }}
        path: tests/coverage/javascript/lcov.info

  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run API integration tests
      run: |
        cd tests
        python -m pytest test_api_integration.py -v --junit-xml=api-results.xml
      env:
        PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/scripts
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Note: These would need to be set up as repository secrets
        # WHATSAPP_API_KEY: ${{ secrets.WHATSAPP_API_KEY }}
        # GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
    
    - name: Upload API test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: api-test-results
        path: tests/api-results.xml

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: tests/package-lock.json
    
    - name: Install dependencies
      run: |
        cd tests
        npm ci
    
    - name: Install Playwright browsers
      run: |
        cd tests
        npx playwright install --with-deps
    
    - name: Run E2E tests
      run: |
        cd tests
        npx playwright test --reporter=html --reporter=junit
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: tests/test-results/
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: tests/playwright-report/

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security linter
      uses: tj-actions/bandit@v5.1
      with:
        options: "-r scripts/ -f json -o bandit-report.json"
        
    - name: Run Semgrep security analysis
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
          p/javascript
    
    - name: Run custom security checks
      run: |
        python tests/run-tests.py --security-only
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          tests/reports/

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pylint
    
    - name: Run Black code formatter check
      run: |
        black --check --diff scripts/
    
    - name: Run Flake8 linter
      run: |
        flake8 scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 scripts/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run Pylint
      run: |
        pylint scripts/ --exit-zero --output-format=json > pylint-report.json
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install ESLint
      run: |
        npm install -g eslint
    
    - name: Run ESLint
      run: |
        eslint js/ --ext .js --format json --output-file eslint-report.json || true
    
    - name: Upload code quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports
        path: |
          pylint-report.json
          eslint-report.json

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [python-tests, javascript-tests, api-tests, e2e-tests, security-tests, code-quality]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Generate test summary
      run: |
        python -c "
        import json
        import os
        from pathlib import Path
        
        summary = {
            'total_jobs': 6,
            'passed_jobs': 0,
            'failed_jobs': 0,
            'artifacts': []
        }
        
        # Count artifacts to estimate success
        artifact_dirs = [d for d in Path('.').iterdir() if d.is_dir()]
        summary['artifacts'] = [d.name for d in artifact_dirs]
        
        # Estimate success based on artifact presence
        expected_artifacts = [
            'python-test-results-3.10',
            'javascript-test-results-18',
            'api-test-results',
            'e2e-test-results'
        ]
        
        found_artifacts = sum(1 for expected in expected_artifacts if any(expected in artifact for artifact in summary['artifacts']))
        summary['passed_jobs'] = found_artifacts
        summary['failed_jobs'] = len(expected_artifacts) - found_artifacts
        
        print(f\"Test Summary:\")
        print(f\"Total test jobs: {summary['total_jobs']}\")
        print(f\"Estimated passed: {summary['passed_jobs']}\")
        print(f\"Estimated failed: {summary['failed_jobs']}\")
        print(f\"Artifacts generated: {len(summary['artifacts'])}\")
        
        with open('test-summary.json', 'w') as f:
            json.dump(summary, f, indent=2)
        "
    
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-summary
        path: test-summary.json
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üß™ Test Results Summary\n\n';
          
          const jobs = [
            { name: 'Python Tests', needed: context.payload.pull_request ? true : false },
            { name: 'JavaScript Tests', needed: context.payload.pull_request ? true : false },
            { name: 'API Tests', needed: true },
            { name: 'E2E Tests', needed: true },
            { name: 'Security Tests', needed: true },
            { name: 'Code Quality', needed: true }
          ];
          
          for (const job of jobs) {
            comment += `- ${job.name}: ‚è≥ Running\n`;
          }
          
          comment += '\n*This comment will be updated when tests complete.*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Separate workflow for nightly comprehensive tests
  nightly-tests:
    name: Nightly Comprehensive Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' # Only run on scheduled events
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Run comprehensive test suite
      run: |
        cd tests
        python run-tests.py --all
      env:
        PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/scripts
    
    - name: Upload comprehensive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: nightly-test-results
        path: tests/reports/